//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MiniSQL.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="MiniSQLParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface IMiniSQLListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProg([NotNull] MiniSQLParser.ProgContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProg([NotNull] MiniSQLParser.ProgContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.simpleStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleStatement([NotNull] MiniSQLParser.SimpleStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.simpleStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleStatement([NotNull] MiniSQLParser.SimpleStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.quitStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQuitStatement([NotNull] MiniSQLParser.QuitStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.quitStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQuitStatement([NotNull] MiniSQLParser.QuitStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.execFileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExecFileStatement([NotNull] MiniSQLParser.ExecFileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.execFileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExecFileStatement([NotNull] MiniSQLParser.ExecFileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.showTablesStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterShowTablesStatement([NotNull] MiniSQLParser.ShowTablesStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.showTablesStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitShowTablesStatement([NotNull] MiniSQLParser.ShowTablesStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.createStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCreateStatement([NotNull] MiniSQLParser.CreateStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.createStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCreateStatement([NotNull] MiniSQLParser.CreateStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.createTable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCreateTable([NotNull] MiniSQLParser.CreateTableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.createTable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCreateTable([NotNull] MiniSQLParser.CreateTableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.createIndex"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCreateIndex([NotNull] MiniSQLParser.CreateIndexContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.createIndex"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCreateIndex([NotNull] MiniSQLParser.CreateIndexContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.dropStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDropStatement([NotNull] MiniSQLParser.DropStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.dropStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDropStatement([NotNull] MiniSQLParser.DropStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.deleteStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeleteStatement([NotNull] MiniSQLParser.DeleteStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.deleteStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeleteStatement([NotNull] MiniSQLParser.DeleteStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.insertStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInsertStatement([NotNull] MiniSQLParser.InsertStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.insertStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInsertStatement([NotNull] MiniSQLParser.InsertStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.selectStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelectStatement([NotNull] MiniSQLParser.SelectStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.selectStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelectStatement([NotNull] MiniSQLParser.SelectStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.queryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryExpression([NotNull] MiniSQLParser.QueryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.queryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryExpression([NotNull] MiniSQLParser.QueryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.fromClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFromClause([NotNull] MiniSQLParser.FromClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.fromClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFromClause([NotNull] MiniSQLParser.FromClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.queryExpressionParens"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryExpressionParens([NotNull] MiniSQLParser.QueryExpressionParensContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.queryExpressionParens"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryExpressionParens([NotNull] MiniSQLParser.QueryExpressionParensContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.dropIndex"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDropIndex([NotNull] MiniSQLParser.DropIndexContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.dropIndex"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDropIndex([NotNull] MiniSQLParser.DropIndexContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.dropTable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDropTable([NotNull] MiniSQLParser.DropTableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.dropTable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDropTable([NotNull] MiniSQLParser.DropTableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.insertValues"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInsertValues([NotNull] MiniSQLParser.InsertValuesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.insertValues"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInsertValues([NotNull] MiniSQLParser.InsertValuesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.valueList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValueList([NotNull] MiniSQLParser.ValueListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.valueList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValueList([NotNull] MiniSQLParser.ValueListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>values</c>
	/// labeled alternative in <see cref="MiniSQLParser.exprexprexprexprexprexprexprexprexprexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValues([NotNull] MiniSQLParser.ValuesContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>values</c>
	/// labeled alternative in <see cref="MiniSQLParser.exprexprexprexprexprexprexprexprexprexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValues([NotNull] MiniSQLParser.ValuesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.whereClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhereClause([NotNull] MiniSQLParser.WhereClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.whereClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhereClause([NotNull] MiniSQLParser.WhereClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.tableElementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTableElementList([NotNull] MiniSQLParser.TableElementListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.tableElementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTableElementList([NotNull] MiniSQLParser.TableElementListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.tableElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTableElement([NotNull] MiniSQLParser.TableElementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.tableElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTableElement([NotNull] MiniSQLParser.TableElementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.tableConstraintDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTableConstraintDef([NotNull] MiniSQLParser.TableConstraintDefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.tableConstraintDef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTableConstraintDef([NotNull] MiniSQLParser.TableConstraintDefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.columnDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterColumnDefinition([NotNull] MiniSQLParser.ColumnDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.columnDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitColumnDefinition([NotNull] MiniSQLParser.ColumnDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.fieldDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFieldDefinition([NotNull] MiniSQLParser.FieldDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.fieldDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFieldDefinition([NotNull] MiniSQLParser.FieldDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.dataType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDataType([NotNull] MiniSQLParser.DataTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.dataType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDataType([NotNull] MiniSQLParser.DataTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.fieldLength"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFieldLength([NotNull] MiniSQLParser.FieldLengthContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.fieldLength"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFieldLength([NotNull] MiniSQLParser.FieldLengthContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.columnAttribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterColumnAttribute([NotNull] MiniSQLParser.ColumnAttributeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.columnAttribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitColumnAttribute([NotNull] MiniSQLParser.ColumnAttributeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.createIndexTarget"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCreateIndexTarget([NotNull] MiniSQLParser.CreateIndexTargetContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.createIndexTarget"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCreateIndexTarget([NotNull] MiniSQLParser.CreateIndexTargetContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.keyListVariants"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKeyListVariants([NotNull] MiniSQLParser.KeyListVariantsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.keyListVariants"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKeyListVariants([NotNull] MiniSQLParser.KeyListVariantsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.tableName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTableName([NotNull] MiniSQLParser.TableNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.tableName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTableName([NotNull] MiniSQLParser.TableNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.columnName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterColumnName([NotNull] MiniSQLParser.ColumnNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.columnName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitColumnName([NotNull] MiniSQLParser.ColumnNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.keyPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKeyPart([NotNull] MiniSQLParser.KeyPartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.keyPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKeyPart([NotNull] MiniSQLParser.KeyPartContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.indexRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndexRef([NotNull] MiniSQLParser.IndexRefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.indexRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndexRef([NotNull] MiniSQLParser.IndexRefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.tableRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTableRef([NotNull] MiniSQLParser.TableRefContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.tableRef"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTableRef([NotNull] MiniSQLParser.TableRefContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.fieldIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFieldIdentifier([NotNull] MiniSQLParser.FieldIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.fieldIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFieldIdentifier([NotNull] MiniSQLParser.FieldIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.indexName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndexName([NotNull] MiniSQLParser.IndexNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.indexName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndexName([NotNull] MiniSQLParser.IndexNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.pureIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPureIdentifier([NotNull] MiniSQLParser.PureIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.pureIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPureIdentifier([NotNull] MiniSQLParser.PureIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] MiniSQLParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] MiniSQLParser.IdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.qualifiedIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQualifiedIdentifier([NotNull] MiniSQLParser.QualifiedIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.qualifiedIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQualifiedIdentifier([NotNull] MiniSQLParser.QualifiedIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprAtom</c>
	/// labeled alternative in <see cref="MiniSQLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprAtom([NotNull] MiniSQLParser.ExprAtomContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprAtom</c>
	/// labeled alternative in <see cref="MiniSQLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprAtom([NotNull] MiniSQLParser.ExprAtomContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprOr</c>
	/// labeled alternative in <see cref="MiniSQLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprOr([NotNull] MiniSQLParser.ExprOrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprOr</c>
	/// labeled alternative in <see cref="MiniSQLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprOr([NotNull] MiniSQLParser.ExprOrContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprNot</c>
	/// labeled alternative in <see cref="MiniSQLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprNot([NotNull] MiniSQLParser.ExprNotContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprNot</c>
	/// labeled alternative in <see cref="MiniSQLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprNot([NotNull] MiniSQLParser.ExprNotContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprMul</c>
	/// labeled alternative in <see cref="MiniSQLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprMul([NotNull] MiniSQLParser.ExprMulContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprMul</c>
	/// labeled alternative in <see cref="MiniSQLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprMul([NotNull] MiniSQLParser.ExprMulContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprPar</c>
	/// labeled alternative in <see cref="MiniSQLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprPar([NotNull] MiniSQLParser.ExprParContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprPar</c>
	/// labeled alternative in <see cref="MiniSQLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprPar([NotNull] MiniSQLParser.ExprParContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprAdd</c>
	/// labeled alternative in <see cref="MiniSQLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprAdd([NotNull] MiniSQLParser.ExprAddContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprAdd</c>
	/// labeled alternative in <see cref="MiniSQLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprAdd([NotNull] MiniSQLParser.ExprAddContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprAnd</c>
	/// labeled alternative in <see cref="MiniSQLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprAnd([NotNull] MiniSQLParser.ExprAndContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprAnd</c>
	/// labeled alternative in <see cref="MiniSQLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprAnd([NotNull] MiniSQLParser.ExprAndContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprXor</c>
	/// labeled alternative in <see cref="MiniSQLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprXor([NotNull] MiniSQLParser.ExprXorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprXor</c>
	/// labeled alternative in <see cref="MiniSQLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprXor([NotNull] MiniSQLParser.ExprXorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprSign</c>
	/// labeled alternative in <see cref="MiniSQLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprSign([NotNull] MiniSQLParser.ExprSignContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprSign</c>
	/// labeled alternative in <see cref="MiniSQLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprSign([NotNull] MiniSQLParser.ExprSignContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprCompare</c>
	/// labeled alternative in <see cref="MiniSQLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprCompare([NotNull] MiniSQLParser.ExprCompareContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprCompare</c>
	/// labeled alternative in <see cref="MiniSQLParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprCompare([NotNull] MiniSQLParser.ExprCompareContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.compOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompOp([NotNull] MiniSQLParser.CompOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.compOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompOp([NotNull] MiniSQLParser.CompOpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtom([NotNull] MiniSQLParser.AtomContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtom([NotNull] MiniSQLParser.AtomContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.scientific"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterScientific([NotNull] MiniSQLParser.ScientificContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.scientific"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitScientific([NotNull] MiniSQLParser.ScientificContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniSQLParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable([NotNull] MiniSQLParser.VariableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniSQLParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable([NotNull] MiniSQLParser.VariableContext context);
}
