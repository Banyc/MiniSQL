//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MiniSQL.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MiniSQLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		HEX_NUMBER=1, BIN_NUMBER=2, INT_NUMBER=3, DECIMAL_NUMBER=4, FLOAT_NUMBER=5, 
		SHOW_SYMBOL=6, EXECFILE_SYMBOL=7, QUIT_SYMBOL=8, AND_SYMBOL=9, ASC_SYMBOL=10, 
		AS_SYMBOL=11, BEGIN_SYMBOL=12, BY_SYMBOL=13, CHAR_SYMBOL=14, CREATE_SYMBOL=15, 
		DELETE_SYMBOL=16, DESC_SYMBOL=17, DROP_SYMBOL=18, FLOAT_SYMBOL=19, FROM_SYMBOL=20, 
		INDEX_SYMBOL=21, INSERT_SYMBOL=22, INTO_SYMBOL=23, INT_SYMBOL=24, KEY_SYMBOL=25, 
		NOT_SYMBOL=26, ON_SYMBOL=27, ORDER_SYMBOL=28, OR_SYMBOL=29, PRIMARY_SYMBOL=30, 
		SELECT_SYMBOL=31, TABLES_SYMBOL=32, TABLE_SYMBOL=33, UNIQUE_SYMBOL=34, 
		VALUES_SYMBOL=35, VALUE_SYMBOL=36, WHERE_SYMBOL=37, WORK_SYMBOL=38, XOR_SYMBOL=39, 
		EQUAL_OPERATOR=40, ASSIGN_OPERATOR=41, NULL_SAFE_EQUAL_OPERATOR=42, GREATER_OR_EQUAL_OPERATOR=43, 
		GREATER_THAN_OPERATOR=44, LESS_OR_EQUAL_OPERATOR=45, LESS_THAN_OPERATOR=46, 
		NOT_EQUAL_OPERATOR=47, PLUS_OPERATOR=48, MINUS_OPERATOR=49, MULT_OPERATOR=50, 
		DIV_OPERATOR=51, MOD_OPERATOR=52, LOGICAL_NOT_OPERATOR=53, BITWISE_NOT_OPERATOR=54, 
		SHIFT_LEFT_OPERATOR=55, SHIFT_RIGHT_OPERATOR=56, LOGICAL_AND_OPERATOR=57, 
		BITWISE_AND_OPERATOR=58, BITWISE_XOR_OPERATOR=59, LOGICAL_OR_OPERATOR=60, 
		BITWISE_OR_OPERATOR=61, DOT_SYMBOL=62, COMMA_SYMBOL=63, SEMICOLON_SYMBOL=64, 
		COLON_SYMBOL=65, OPEN_PAR_SYMBOL=66, CLOSE_PAR_SYMBOL=67, OPEN_CURLY_SYMBOL=68, 
		CLOSE_CURLY_SYMBOL=69, UNDERLINE_SYMBOL=70, WHITESPACE=71, IDENTIFIER=72, 
		NCHAR_TEXT=73, DOUBLE_QUOTED_TEXT=74, SINGLE_QUOTED_TEXT=75, BLOCK_COMMENT=76, 
		POUND_COMMENT=77, DASHDASH_COMMENT=78, NOT_EQUAL2_OPERATOR=79;
	public const int
		RULE_prog = 0, RULE_simpleStatement = 1, RULE_quitStatement = 2, RULE_execFileStatement = 3, 
		RULE_showTablesStatement = 4, RULE_createStatement = 5, RULE_createTable = 6, 
		RULE_createIndex = 7, RULE_dropStatement = 8, RULE_deleteStatement = 9, 
		RULE_insertStatement = 10, RULE_selectStatement = 11, RULE_queryExpression = 12, 
		RULE_fromClause = 13, RULE_queryExpressionParens = 14, RULE_dropIndex = 15, 
		RULE_dropTable = 16, RULE_insertValues = 17, RULE_valueList = 18, RULE_values = 19, 
		RULE_whereClause = 20, RULE_tableElementList = 21, RULE_tableElement = 22, 
		RULE_tableConstraintDef = 23, RULE_columnDefinition = 24, RULE_fieldDefinition = 25, 
		RULE_dataType = 26, RULE_fieldLength = 27, RULE_columnAttribute = 28, 
		RULE_createIndexTarget = 29, RULE_keyListVariants = 30, RULE_tableName = 31, 
		RULE_columnName = 32, RULE_keyPart = 33, RULE_indexRef = 34, RULE_tableRef = 35, 
		RULE_fieldIdentifier = 36, RULE_indexName = 37, RULE_pureIdentifier = 38, 
		RULE_identifier = 39, RULE_qualifiedIdentifier = 40, RULE_expr = 41, RULE_compOp = 42, 
		RULE_atom = 43, RULE_scientific = 44, RULE_variable = 45;
	public static readonly string[] ruleNames = {
		"prog", "simpleStatement", "quitStatement", "execFileStatement", "showTablesStatement", 
		"createStatement", "createTable", "createIndex", "dropStatement", "deleteStatement", 
		"insertStatement", "selectStatement", "queryExpression", "fromClause", 
		"queryExpressionParens", "dropIndex", "dropTable", "insertValues", "valueList", 
		"values", "whereClause", "tableElementList", "tableElement", "tableConstraintDef", 
		"columnDefinition", "fieldDefinition", "dataType", "fieldLength", "columnAttribute", 
		"createIndexTarget", "keyListVariants", "tableName", "columnName", "keyPart", 
		"indexRef", "tableRef", "fieldIdentifier", "indexName", "pureIdentifier", 
		"identifier", "qualifiedIdentifier", "expr", "compOp", "atom", "scientific", 
		"variable"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "'='", "':='", "'<=>'", "'>='", "'>'", "'<='", 
		"'<'", "'!='", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'~'", "'<<'", 
		"'>>'", "'&&'", "'&'", "'^'", "'||'", "'|'", "'.'", "','", "';'", "':'", 
		"'('", "')'", "'{'", "'}'", "'_'", null, null, null, null, null, null, 
		null, null, "'<>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "HEX_NUMBER", "BIN_NUMBER", "INT_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", 
		"SHOW_SYMBOL", "EXECFILE_SYMBOL", "QUIT_SYMBOL", "AND_SYMBOL", "ASC_SYMBOL", 
		"AS_SYMBOL", "BEGIN_SYMBOL", "BY_SYMBOL", "CHAR_SYMBOL", "CREATE_SYMBOL", 
		"DELETE_SYMBOL", "DESC_SYMBOL", "DROP_SYMBOL", "FLOAT_SYMBOL", "FROM_SYMBOL", 
		"INDEX_SYMBOL", "INSERT_SYMBOL", "INTO_SYMBOL", "INT_SYMBOL", "KEY_SYMBOL", 
		"NOT_SYMBOL", "ON_SYMBOL", "ORDER_SYMBOL", "OR_SYMBOL", "PRIMARY_SYMBOL", 
		"SELECT_SYMBOL", "TABLES_SYMBOL", "TABLE_SYMBOL", "UNIQUE_SYMBOL", "VALUES_SYMBOL", 
		"VALUE_SYMBOL", "WHERE_SYMBOL", "WORK_SYMBOL", "XOR_SYMBOL", "EQUAL_OPERATOR", 
		"ASSIGN_OPERATOR", "NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", 
		"GREATER_THAN_OPERATOR", "LESS_OR_EQUAL_OPERATOR", "LESS_THAN_OPERATOR", 
		"NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", "MINUS_OPERATOR", "MULT_OPERATOR", 
		"DIV_OPERATOR", "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", 
		"SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", 
		"BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", 
		"BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL", "SEMICOLON_SYMBOL", 
		"COLON_SYMBOL", "OPEN_PAR_SYMBOL", "CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", 
		"CLOSE_CURLY_SYMBOL", "UNDERLINE_SYMBOL", "WHITESPACE", "IDENTIFIER", 
		"NCHAR_TEXT", "DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "BLOCK_COMMENT", 
		"POUND_COMMENT", "DASHDASH_COMMENT", "NOT_EQUAL2_OPERATOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniSQL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MiniSQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniSQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniSQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MiniSQLParser.Eof, 0); }
		public SimpleStatementContext[] simpleStatement() {
			return GetRuleContexts<SimpleStatementContext>();
		}
		public SimpleStatementContext simpleStatement(int i) {
			return GetRuleContext<SimpleStatementContext>(i);
		}
		public ITerminalNode[] SEMICOLON_SYMBOL() { return GetTokens(MiniSQLParser.SEMICOLON_SYMBOL); }
		public ITerminalNode SEMICOLON_SYMBOL(int i) {
			return GetToken(MiniSQLParser.SEMICOLON_SYMBOL, i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			State = 102;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92; Match(Eof);
				}
				break;
			case SHOW_SYMBOL:
			case EXECFILE_SYMBOL:
			case QUIT_SYMBOL:
			case CREATE_SYMBOL:
			case DELETE_SYMBOL:
			case DROP_SYMBOL:
			case INSERT_SYMBOL:
			case SELECT_SYMBOL:
			case SEMICOLON_SYMBOL:
			case OPEN_PAR_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 93; simpleStatement();
					State = 94; Match(SEMICOLON_SYMBOL);
					}
					}
					State = 98;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 6)) & ~0x3f) == 0 && ((1L << (_la - 6)) & ((1L << (SHOW_SYMBOL - 6)) | (1L << (EXECFILE_SYMBOL - 6)) | (1L << (QUIT_SYMBOL - 6)) | (1L << (CREATE_SYMBOL - 6)) | (1L << (DELETE_SYMBOL - 6)) | (1L << (DROP_SYMBOL - 6)) | (1L << (INSERT_SYMBOL - 6)) | (1L << (SELECT_SYMBOL - 6)) | (1L << (SEMICOLON_SYMBOL - 6)) | (1L << (OPEN_PAR_SYMBOL - 6)))) != 0) );
				State = 100; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		public CreateStatementContext createStatement() {
			return GetRuleContext<CreateStatementContext>(0);
		}
		public DropStatementContext dropStatement() {
			return GetRuleContext<DropStatementContext>(0);
		}
		public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public QuitStatementContext quitStatement() {
			return GetRuleContext<QuitStatementContext>(0);
		}
		public ExecFileStatementContext execFileStatement() {
			return GetRuleContext<ExecFileStatementContext>(0);
		}
		public ShowTablesStatementContext showTablesStatement() {
			return GetRuleContext<ShowTablesStatementContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_simpleStatement);
		try {
			State = 113;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMICOLON_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case CREATE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 105; createStatement();
				}
				break;
			case DROP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 106; dropStatement();
				}
				break;
			case DELETE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 107; deleteStatement();
				}
				break;
			case INSERT_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 108; insertStatement();
				}
				break;
			case SELECT_SYMBOL:
			case OPEN_PAR_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 109; selectStatement();
				}
				break;
			case QUIT_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 110; quitStatement();
				}
				break;
			case EXECFILE_SYMBOL:
				EnterOuterAlt(_localctx, 8);
				{
				State = 111; execFileStatement();
				}
				break;
			case SHOW_SYMBOL:
				EnterOuterAlt(_localctx, 9);
				{
				State = 112; showTablesStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuitStatementContext : ParserRuleContext {
		public ITerminalNode QUIT_SYMBOL() { return GetToken(MiniSQLParser.QUIT_SYMBOL, 0); }
		public QuitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quitStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterQuitStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitQuitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuitStatementContext quitStatement() {
		QuitStatementContext _localctx = new QuitStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_quitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(QUIT_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecFileStatementContext : ParserRuleContext {
		public ITerminalNode EXECFILE_SYMBOL() { return GetToken(MiniSQLParser.EXECFILE_SYMBOL, 0); }
		public ITerminalNode SINGLE_QUOTED_TEXT() { return GetToken(MiniSQLParser.SINGLE_QUOTED_TEXT, 0); }
		public ITerminalNode DOUBLE_QUOTED_TEXT() { return GetToken(MiniSQLParser.DOUBLE_QUOTED_TEXT, 0); }
		public ExecFileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execFileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterExecFileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitExecFileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecFileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecFileStatementContext execFileStatement() {
		ExecFileStatementContext _localctx = new ExecFileStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_execFileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(EXECFILE_SYMBOL);
			State = 118;
			_la = TokenStream.LA(1);
			if ( !(_la==DOUBLE_QUOTED_TEXT || _la==SINGLE_QUOTED_TEXT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowTablesStatementContext : ParserRuleContext {
		public ITerminalNode SHOW_SYMBOL() { return GetToken(MiniSQLParser.SHOW_SYMBOL, 0); }
		public ITerminalNode TABLES_SYMBOL() { return GetToken(MiniSQLParser.TABLES_SYMBOL, 0); }
		public ShowTablesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showTablesStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterShowTablesStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitShowTablesStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowTablesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowTablesStatementContext showTablesStatement() {
		ShowTablesStatementContext _localctx = new ShowTablesStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_showTablesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(SHOW_SYMBOL);
			State = 121; Match(TABLES_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateStatementContext : ParserRuleContext {
		public ITerminalNode CREATE_SYMBOL() { return GetToken(MiniSQLParser.CREATE_SYMBOL, 0); }
		public CreateTableContext createTable() {
			return GetRuleContext<CreateTableContext>(0);
		}
		public CreateIndexContext createIndex() {
			return GetRuleContext<CreateIndexContext>(0);
		}
		public CreateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterCreateStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitCreateStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateStatementContext createStatement() {
		CreateStatementContext _localctx = new CreateStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_createStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(CREATE_SYMBOL);
			State = 126;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TABLE_SYMBOL:
				{
				State = 124; createTable();
				}
				break;
			case INDEX_SYMBOL:
			case UNIQUE_SYMBOL:
				{
				State = 125; createIndex();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableContext : ParserRuleContext {
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MiniSQLParser.TABLE_SYMBOL, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MiniSQLParser.OPEN_PAR_SYMBOL, 0); }
		public TableElementListContext tableElementList() {
			return GetRuleContext<TableElementListContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MiniSQLParser.CLOSE_PAR_SYMBOL, 0); }
		public CreateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterCreateTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitCreateTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableContext createTable() {
		CreateTableContext _localctx = new CreateTableContext(Context, State);
		EnterRule(_localctx, 12, RULE_createTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; Match(TABLE_SYMBOL);
			State = 129; tableName();
			{
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 130; Match(OPEN_PAR_SYMBOL);
				State = 131; tableElementList();
				State = 132; Match(CLOSE_PAR_SYMBOL);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexContext : ParserRuleContext {
		public IToken type;
		public IndexNameContext indexName() {
			return GetRuleContext<IndexNameContext>(0);
		}
		public CreateIndexTargetContext createIndexTarget() {
			return GetRuleContext<CreateIndexTargetContext>(0);
		}
		public ITerminalNode INDEX_SYMBOL() { return GetToken(MiniSQLParser.INDEX_SYMBOL, 0); }
		public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MiniSQLParser.UNIQUE_SYMBOL, 0); }
		public CreateIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterCreateIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitCreateIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexContext createIndex() {
		CreateIndexContext _localctx = new CreateIndexContext(Context, State);
		EnterRule(_localctx, 14, RULE_createIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIQUE_SYMBOL) {
				{
				State = 136; Match(UNIQUE_SYMBOL);
				}
			}

			State = 139; _localctx.type = Match(INDEX_SYMBOL);
			State = 140; indexName();
			State = 141; createIndexTarget();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropStatementContext : ParserRuleContext {
		public ITerminalNode DROP_SYMBOL() { return GetToken(MiniSQLParser.DROP_SYMBOL, 0); }
		public DropIndexContext dropIndex() {
			return GetRuleContext<DropIndexContext>(0);
		}
		public DropTableContext dropTable() {
			return GetRuleContext<DropTableContext>(0);
		}
		public DropStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterDropStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitDropStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropStatementContext dropStatement() {
		DropStatementContext _localctx = new DropStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_dropStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(DROP_SYMBOL);
			State = 146;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEX_SYMBOL:
				{
				State = 144; dropIndex();
				}
				break;
			case TABLES_SYMBOL:
			case TABLE_SYMBOL:
				{
				State = 145; dropTable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		public ITerminalNode DELETE_SYMBOL() { return GetToken(MiniSQLParser.DELETE_SYMBOL, 0); }
		public ITerminalNode FROM_SYMBOL() { return GetToken(MiniSQLParser.FROM_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_deleteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; Match(DELETE_SYMBOL);
			{
			State = 149; Match(FROM_SYMBOL);
			{
			State = 150; tableRef();
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE_SYMBOL) {
				{
				State = 151; whereClause();
				}
			}

			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementContext : ParserRuleContext {
		public ITerminalNode INSERT_SYMBOL() { return GetToken(MiniSQLParser.INSERT_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public InsertValuesContext insertValues() {
			return GetRuleContext<InsertValuesContext>(0);
		}
		public ITerminalNode INTO_SYMBOL() { return GetToken(MiniSQLParser.INTO_SYMBOL, 0); }
		public InsertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterInsertStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitInsertStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementContext insertStatement() {
		InsertStatementContext _localctx = new InsertStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_insertStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; Match(INSERT_SYMBOL);
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO_SYMBOL) {
				{
				State = 155; Match(INTO_SYMBOL);
				}
			}

			State = 158; tableRef();
			{
			State = 159; insertValues();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterSelectStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitSelectStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_selectStatement);
		try {
			State = 163;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 161; queryExpression();
				}
				break;
			case OPEN_PAR_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 162; queryExpressionParens();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionContext : ParserRuleContext {
		public ITerminalNode SELECT_SYMBOL() { return GetToken(MiniSQLParser.SELECT_SYMBOL, 0); }
		public ITerminalNode MULT_OPERATOR() { return GetToken(MiniSQLParser.MULT_OPERATOR, 0); }
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterQueryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitQueryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionContext queryExpression() {
		QueryExpressionContext _localctx = new QueryExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_queryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; Match(SELECT_SYMBOL);
			State = 166; Match(MULT_OPERATOR);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_SYMBOL) {
				{
				State = 167; fromClause();
				}
			}

			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE_SYMBOL) {
				{
				State = 170; whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : ParserRuleContext {
		public ITerminalNode FROM_SYMBOL() { return GetToken(MiniSQLParser.FROM_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(Context, State);
		EnterRule(_localctx, 26, RULE_fromClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; Match(FROM_SYMBOL);
			State = 174; tableRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionParensContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MiniSQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MiniSQLParser.CLOSE_PAR_SYMBOL, 0); }
		public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		public QueryExpressionParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionParens; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterQueryExpressionParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitQueryExpressionParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryExpressionParens(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionParensContext queryExpressionParens() {
		QueryExpressionParensContext _localctx = new QueryExpressionParensContext(Context, State);
		EnterRule(_localctx, 28, RULE_queryExpressionParens);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176; Match(OPEN_PAR_SYMBOL);
			State = 179;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAR_SYMBOL:
				{
				State = 177; queryExpressionParens();
				}
				break;
			case SELECT_SYMBOL:
				{
				State = 178; queryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 181; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropIndexContext : ParserRuleContext {
		public IToken type;
		public IndexRefContext indexRef() {
			return GetRuleContext<IndexRefContext>(0);
		}
		public ITerminalNode INDEX_SYMBOL() { return GetToken(MiniSQLParser.INDEX_SYMBOL, 0); }
		public ITerminalNode ON_SYMBOL() { return GetToken(MiniSQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropIndex; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterDropIndex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitDropIndex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropIndexContext dropIndex() {
		DropIndexContext _localctx = new DropIndexContext(Context, State);
		EnterRule(_localctx, 30, RULE_dropIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; _localctx.type = Match(INDEX_SYMBOL);
			State = 184; indexRef();
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON_SYMBOL) {
				{
				State = 185; Match(ON_SYMBOL);
				State = 186; tableRef();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTableContext : ParserRuleContext {
		public IToken type;
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ITerminalNode TABLE_SYMBOL() { return GetToken(MiniSQLParser.TABLE_SYMBOL, 0); }
		public ITerminalNode TABLES_SYMBOL() { return GetToken(MiniSQLParser.TABLES_SYMBOL, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterDropTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitDropTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTableContext dropTable() {
		DropTableContext _localctx = new DropTableContext(Context, State);
		EnterRule(_localctx, 32, RULE_dropTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			_localctx.type = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				_localctx.type = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 190; tableRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertValuesContext : ParserRuleContext {
		public ValueListContext valueList() {
			return GetRuleContext<ValueListContext>(0);
		}
		public ITerminalNode VALUES_SYMBOL() { return GetToken(MiniSQLParser.VALUES_SYMBOL, 0); }
		public ITerminalNode VALUE_SYMBOL() { return GetToken(MiniSQLParser.VALUE_SYMBOL, 0); }
		public InsertValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertValues; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterInsertValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitInsertValues(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertValuesContext insertValues() {
		InsertValuesContext _localctx = new InsertValuesContext(Context, State);
		EnterRule(_localctx, 34, RULE_insertValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			_la = TokenStream.LA(1);
			if ( !(_la==VALUES_SYMBOL || _la==VALUE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 193; valueList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueListContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MiniSQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MiniSQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ValuesContext @values() {
			return GetRuleContext<ValuesContext>(0);
		}
		public ValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitValueList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueListContext valueList() {
		ValueListContext _localctx = new ValueListContext(Context, State);
		EnterRule(_localctx, 36, RULE_valueList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; Match(OPEN_PAR_SYMBOL);
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_NUMBER) | (1L << DECIMAL_NUMBER) | (1L << NOT_SYMBOL) | (1L << PLUS_OPERATOR) | (1L << MINUS_OPERATOR))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (OPEN_PAR_SYMBOL - 66)) | (1L << (IDENTIFIER - 66)) | (1L << (DOUBLE_QUOTED_TEXT - 66)) | (1L << (SINGLE_QUOTED_TEXT - 66)))) != 0)) {
				{
				State = 196; @values();
				}
			}

			State = 199; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MiniSQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MiniSQLParser.COMMA_SYMBOL, i);
		}
		public ValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitValues(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValuesContext @values() {
		ValuesContext _localctx = new ValuesContext(Context, State);
		EnterRule(_localctx, 38, RULE_values);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 201; expr(0);
			}
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 202; Match(COMMA_SYMBOL);
				{
				State = 203; expr(0);
				}
				}
				}
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		public ITerminalNode WHERE_SYMBOL() { return GetToken(MiniSQLParser.WHERE_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 40, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; Match(WHERE_SYMBOL);
			State = 210; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableElementListContext : ParserRuleContext {
		public TableElementContext[] tableElement() {
			return GetRuleContexts<TableElementContext>();
		}
		public TableElementContext tableElement(int i) {
			return GetRuleContext<TableElementContext>(i);
		}
		public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MiniSQLParser.COMMA_SYMBOL); }
		public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MiniSQLParser.COMMA_SYMBOL, i);
		}
		public TableElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableElementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterTableElementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitTableElementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableElementListContext tableElementList() {
		TableElementListContext _localctx = new TableElementListContext(Context, State);
		EnterRule(_localctx, 42, RULE_tableElementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; tableElement();
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 213; Match(COMMA_SYMBOL);
				State = 214; tableElement();
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableElementContext : ParserRuleContext {
		public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		public TableConstraintDefContext tableConstraintDef() {
			return GetRuleContext<TableConstraintDefContext>(0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterTableElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitTableElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableElementContext tableElement() {
		TableElementContext _localctx = new TableElementContext(Context, State);
		EnterRule(_localctx, 44, RULE_tableElement);
		try {
			State = 222;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 220; columnDefinition();
				}
				break;
			case PRIMARY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 221; tableConstraintDef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableConstraintDefContext : ParserRuleContext {
		public IToken type;
		public KeyListVariantsContext keyListVariants() {
			return GetRuleContext<KeyListVariantsContext>(0);
		}
		public ITerminalNode KEY_SYMBOL() { return GetToken(MiniSQLParser.KEY_SYMBOL, 0); }
		public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MiniSQLParser.PRIMARY_SYMBOL, 0); }
		public TableConstraintDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableConstraintDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterTableConstraintDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitTableConstraintDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableConstraintDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableConstraintDefContext tableConstraintDef() {
		TableConstraintDefContext _localctx = new TableConstraintDefContext(Context, State);
		EnterRule(_localctx, 46, RULE_tableConstraintDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 224; _localctx.type = Match(PRIMARY_SYMBOL);
			State = 225; Match(KEY_SYMBOL);
			}
			State = 227; keyListVariants();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefinitionContext : ParserRuleContext {
		public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		public FieldDefinitionContext fieldDefinition() {
			return GetRuleContext<FieldDefinitionContext>(0);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterColumnDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitColumnDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefinitionContext columnDefinition() {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(Context, State);
		EnterRule(_localctx, 48, RULE_columnDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; columnName();
			State = 230; fieldDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ColumnAttributeContext[] columnAttribute() {
			return GetRuleContexts<ColumnAttributeContext>();
		}
		public ColumnAttributeContext columnAttribute(int i) {
			return GetRuleContext<ColumnAttributeContext>(i);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterFieldDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitFieldDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(Context, State);
		EnterRule(_localctx, 50, RULE_fieldDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; dataType();
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==UNIQUE_SYMBOL) {
				{
				{
				State = 233; columnAttribute();
				}
				}
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public IToken type;
		public ITerminalNode INT_SYMBOL() { return GetToken(MiniSQLParser.INT_SYMBOL, 0); }
		public ITerminalNode FLOAT_SYMBOL() { return GetToken(MiniSQLParser.FLOAT_SYMBOL, 0); }
		public ITerminalNode CHAR_SYMBOL() { return GetToken(MiniSQLParser.CHAR_SYMBOL, 0); }
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterDataType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitDataType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_dataType);
		int _la;
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 239; _localctx.type = Match(INT_SYMBOL);
				}
				break;
			case FLOAT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240; _localctx.type = Match(FLOAT_SYMBOL);
				}
				break;
			case CHAR_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 241; _localctx.type = Match(CHAR_SYMBOL);
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAR_SYMBOL) {
					{
					State = 242; fieldLength();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MiniSQLParser.OPEN_PAR_SYMBOL, 0); }
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MiniSQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ITerminalNode INT_NUMBER() { return GetToken(MiniSQLParser.INT_NUMBER, 0); }
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(Context, State);
		EnterRule(_localctx, 54, RULE_fieldLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; Match(OPEN_PAR_SYMBOL);
			{
			State = 248; Match(INT_NUMBER);
			}
			State = 249; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnAttributeContext : ParserRuleContext {
		public IToken value;
		public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MiniSQLParser.UNIQUE_SYMBOL, 0); }
		public ITerminalNode KEY_SYMBOL() { return GetToken(MiniSQLParser.KEY_SYMBOL, 0); }
		public ColumnAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterColumnAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitColumnAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnAttributeContext columnAttribute() {
		ColumnAttributeContext _localctx = new ColumnAttributeContext(Context, State);
		EnterRule(_localctx, 56, RULE_columnAttribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; _localctx.value = Match(UNIQUE_SYMBOL);
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEY_SYMBOL) {
				{
				State = 252; Match(KEY_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexTargetContext : ParserRuleContext {
		public ITerminalNode ON_SYMBOL() { return GetToken(MiniSQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public KeyListVariantsContext keyListVariants() {
			return GetRuleContext<KeyListVariantsContext>(0);
		}
		public CreateIndexTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndexTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterCreateIndexTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitCreateIndexTarget(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndexTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexTargetContext createIndexTarget() {
		CreateIndexTargetContext _localctx = new CreateIndexTargetContext(Context, State);
		EnterRule(_localctx, 58, RULE_createIndexTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; Match(ON_SYMBOL);
			State = 256; tableRef();
			State = 257; keyListVariants();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyListVariantsContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MiniSQLParser.OPEN_PAR_SYMBOL, 0); }
		public KeyPartContext keyPart() {
			return GetRuleContext<KeyPartContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MiniSQLParser.CLOSE_PAR_SYMBOL, 0); }
		public KeyListVariantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyListVariants; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterKeyListVariants(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitKeyListVariants(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyListVariants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyListVariantsContext keyListVariants() {
		KeyListVariantsContext _localctx = new KeyListVariantsContext(Context, State);
		EnterRule(_localctx, 60, RULE_keyListVariants);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; Match(OPEN_PAR_SYMBOL);
			State = 260; keyPart();
			State = 261; Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableNameContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterTableName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitTableName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableNameContext tableName() {
		TableNameContext _localctx = new TableNameContext(Context, State);
		EnterRule(_localctx, 62, RULE_tableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameContext : ParserRuleContext {
		public FieldIdentifierContext fieldIdentifier() {
			return GetRuleContext<FieldIdentifierContext>(0);
		}
		public ColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterColumnName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitColumnName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameContext columnName() {
		ColumnNameContext _localctx = new ColumnNameContext(Context, State);
		EnterRule(_localctx, 64, RULE_columnName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; fieldIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyPartContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public KeyPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterKeyPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitKeyPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyPartContext keyPart() {
		KeyPartContext _localctx = new KeyPartContext(Context, State);
		EnterRule(_localctx, 66, RULE_keyPart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexRefContext : ParserRuleContext {
		public FieldIdentifierContext fieldIdentifier() {
			return GetRuleContext<FieldIdentifierContext>(0);
		}
		public IndexRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterIndexRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitIndexRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexRefContext indexRef() {
		IndexRefContext _localctx = new IndexRefContext(Context, State);
		EnterRule(_localctx, 68, RULE_indexRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269; fieldIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRefContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public TableRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterTableRef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitTableRef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRefContext tableRef() {
		TableRefContext _localctx = new TableRefContext(Context, State);
		EnterRule(_localctx, 70, RULE_tableRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldIdentifierContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public FieldIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterFieldIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitFieldIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldIdentifierContext fieldIdentifier() {
		FieldIdentifierContext _localctx = new FieldIdentifierContext(Context, State);
		EnterRule(_localctx, 72, RULE_fieldIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IndexNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterIndexName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitIndexName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexNameContext indexName() {
		IndexNameContext _localctx = new IndexNameContext(Context, State);
		EnterRule(_localctx, 74, RULE_indexName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PureIdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(MiniSQLParser.IDENTIFIER, 0); }
		public PureIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pureIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterPureIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitPureIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPureIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PureIdentifierContext pureIdentifier() {
		PureIdentifierContext _localctx = new PureIdentifierContext(Context, State);
		EnterRule(_localctx, 76, RULE_pureIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 277; Match(IDENTIFIER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 78, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; pureIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentifierContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterQualifiedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitQualifiedIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentifierContext qualifiedIdentifier() {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(Context, State);
		EnterRule(_localctx, 80, RULE_qualifiedIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprAtomContext : ExprContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public ExprAtomContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterExprAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitExprAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprOrContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OR_SYMBOL() { return GetToken(MiniSQLParser.OR_SYMBOL, 0); }
		public ITerminalNode LOGICAL_OR_OPERATOR() { return GetToken(MiniSQLParser.LOGICAL_OR_OPERATOR, 0); }
		public ExprOrContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterExprOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitExprOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprNotContext : ExprContext {
		public ITerminalNode NOT_SYMBOL() { return GetToken(MiniSQLParser.NOT_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprNotContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterExprNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitExprNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprMulContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MULT_OPERATOR() { return GetToken(MiniSQLParser.MULT_OPERATOR, 0); }
		public ITerminalNode DIV_OPERATOR() { return GetToken(MiniSQLParser.DIV_OPERATOR, 0); }
		public ExprMulContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterExprMul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitExprMul(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprMul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprParContext : ExprContext {
		public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MiniSQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MiniSQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprParContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterExprPar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitExprPar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprPar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprAddContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUS_OPERATOR() { return GetToken(MiniSQLParser.PLUS_OPERATOR, 0); }
		public ITerminalNode MINUS_OPERATOR() { return GetToken(MiniSQLParser.MINUS_OPERATOR, 0); }
		public ExprAddContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterExprAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitExprAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprAndContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AND_SYMBOL() { return GetToken(MiniSQLParser.AND_SYMBOL, 0); }
		public ITerminalNode LOGICAL_AND_OPERATOR() { return GetToken(MiniSQLParser.LOGICAL_AND_OPERATOR, 0); }
		public ExprAndContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterExprAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitExprAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprXorContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode XOR_SYMBOL() { return GetToken(MiniSQLParser.XOR_SYMBOL, 0); }
		public ExprXorContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterExprXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitExprXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprSignContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PLUS_OPERATOR() { return GetToken(MiniSQLParser.PLUS_OPERATOR, 0); }
		public ITerminalNode MINUS_OPERATOR() { return GetToken(MiniSQLParser.MINUS_OPERATOR, 0); }
		public ExprSignContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterExprSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitExprSign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprSign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprCompareContext : ExprContext {
		public CompOpContext op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CompOpContext compOp() {
			return GetRuleContext<CompOpContext>(0);
		}
		public ExprCompareContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterExprCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitExprCompare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprCompare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 82;
		EnterRecursionRule(_localctx, 82, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAR_SYMBOL:
				{
				_localctx = new ExprParContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 284; Match(OPEN_PAR_SYMBOL);
				State = 285; expr(0);
				State = 286; Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case PLUS_OPERATOR:
			case MINUS_OPERATOR:
				{
				_localctx = new ExprSignContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 288;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 289; expr(9);
				}
				break;
			case NOT_SYMBOL:
				{
				_localctx = new ExprNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 290; Match(NOT_SYMBOL);
				State = 291; expr(8);
				}
				break;
			case INT_NUMBER:
			case DECIMAL_NUMBER:
			case IDENTIFIER:
			case DOUBLE_QUOTED_TEXT:
			case SINGLE_QUOTED_TEXT:
				{
				_localctx = new ExprAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 292; atom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 316;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 314;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
					case 1:
						{
						_localctx = new ExprMulContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 295;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 296;
						((ExprMulContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MULT_OPERATOR || _la==DIV_OPERATOR) ) {
							((ExprMulContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 297; expr(8);
						}
						break;
					case 2:
						{
						_localctx = new ExprAddContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 298;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 299;
						((ExprAddContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
							((ExprAddContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 300; expr(7);
						}
						break;
					case 3:
						{
						_localctx = new ExprCompareContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 301;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 302; ((ExprCompareContext)_localctx).op = compOp();
						State = 303; expr(6);
						}
						break;
					case 4:
						{
						_localctx = new ExprAndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 305;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 306;
						((ExprAndContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==AND_SYMBOL || _la==LOGICAL_AND_OPERATOR) ) {
							((ExprAndContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 307; expr(5);
						}
						break;
					case 5:
						{
						_localctx = new ExprXorContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 308;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 309; Match(XOR_SYMBOL);
						State = 310; expr(4);
						}
						break;
					case 6:
						{
						_localctx = new ExprOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 311;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 312;
						((ExprOrContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OR_SYMBOL || _la==LOGICAL_OR_OPERATOR) ) {
							((ExprOrContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 313; expr(3);
						}
						break;
					}
					} 
				}
				State = 318;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CompOpContext : ParserRuleContext {
		public ITerminalNode EQUAL_OPERATOR() { return GetToken(MiniSQLParser.EQUAL_OPERATOR, 0); }
		public ITerminalNode GREATER_OR_EQUAL_OPERATOR() { return GetToken(MiniSQLParser.GREATER_OR_EQUAL_OPERATOR, 0); }
		public ITerminalNode GREATER_THAN_OPERATOR() { return GetToken(MiniSQLParser.GREATER_THAN_OPERATOR, 0); }
		public ITerminalNode LESS_OR_EQUAL_OPERATOR() { return GetToken(MiniSQLParser.LESS_OR_EQUAL_OPERATOR, 0); }
		public ITerminalNode LESS_THAN_OPERATOR() { return GetToken(MiniSQLParser.LESS_THAN_OPERATOR, 0); }
		public ITerminalNode NOT_EQUAL_OPERATOR() { return GetToken(MiniSQLParser.NOT_EQUAL_OPERATOR, 0); }
		public CompOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterCompOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitCompOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompOpContext compOp() {
		CompOpContext _localctx = new CompOpContext(Context, State);
		EnterRule(_localctx, 84, RULE_compOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL_OPERATOR) | (1L << GREATER_OR_EQUAL_OPERATOR) | (1L << GREATER_THAN_OPERATOR) | (1L << LESS_OR_EQUAL_OPERATOR) | (1L << LESS_THAN_OPERATOR) | (1L << NOT_EQUAL_OPERATOR))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public ScientificContext scientific() {
			return GetRuleContext<ScientificContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 86, RULE_atom);
		try {
			State = 323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_NUMBER:
			case DECIMAL_NUMBER:
			case DOUBLE_QUOTED_TEXT:
			case SINGLE_QUOTED_TEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 321; scientific();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 322; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificContext : ParserRuleContext {
		public ITerminalNode INT_NUMBER() { return GetToken(MiniSQLParser.INT_NUMBER, 0); }
		public ITerminalNode DECIMAL_NUMBER() { return GetToken(MiniSQLParser.DECIMAL_NUMBER, 0); }
		public ITerminalNode SINGLE_QUOTED_TEXT() { return GetToken(MiniSQLParser.SINGLE_QUOTED_TEXT, 0); }
		public ITerminalNode DOUBLE_QUOTED_TEXT() { return GetToken(MiniSQLParser.DOUBLE_QUOTED_TEXT, 0); }
		public ScientificContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientific; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterScientific(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitScientific(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientific(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificContext scientific() {
		ScientificContext _localctx = new ScientificContext(Context, State);
		EnterRule(_localctx, 88, RULE_scientific);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			_la = TokenStream.LA(1);
			if ( !(_la==INT_NUMBER || _la==DECIMAL_NUMBER || _la==DOUBLE_QUOTED_TEXT || _la==SINGLE_QUOTED_TEXT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniSQLListener typedListener = listener as IMiniSQLListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniSQLVisitor<TResult> typedVisitor = visitor as IMiniSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 90, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 41: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'Q', '\x14C', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', 
		'\x63', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x64', '\x3', '\x2', 
		'\x3', '\x2', '\x5', '\x2', 'i', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 't', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x81', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x89', '\n', '\b', '\x3', 
		'\t', '\x5', '\t', '\x8C', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'\x95', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', '\x9B', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\x9F', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '\xA6', '\n', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\xAB', '\n', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\xAE', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xB6', '\n', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\xBE', '\n', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xC8', '\n', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', 
		'\x15', '\xCF', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\xD2', '\v', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\a', '\x17', '\xDA', '\n', '\x17', '\f', '\x17', 
		'\xE', '\x17', '\xDD', '\v', '\x17', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\xE1', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', '\xED', '\n', '\x1B', '\f', 
		'\x1B', '\xE', '\x1B', '\xF0', '\v', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\xF6', '\n', '\x1C', '\x5', 
		'\x1C', '\xF8', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x100', '\n', 
		'\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', 
		'%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', 
		'(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x128', '\n', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\a', '+', '\x13D', '\n', '+', '\f', '+', '\xE', '+', '\x140', 
		'\v', '+', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', '\x5', '-', 
		'\x146', '\n', '-', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x2', '\x3', 'T', '\x30', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '\x2', '\v', '\x3', '\x2', 'L', 'M', 
		'\x3', '\x2', '\"', '#', '\x3', '\x2', '%', '&', '\x3', '\x2', '\x32', 
		'\x33', '\x3', '\x2', '\x34', '\x35', '\x4', '\x2', '\v', '\v', ';', ';', 
		'\x4', '\x2', '\x1F', '\x1F', '>', '>', '\x4', '\x2', '*', '*', '-', '\x31', 
		'\x4', '\x2', '\x5', '\x6', 'L', 'M', '\x2', '\x145', '\x2', 'h', '\x3', 
		'\x2', '\x2', '\x2', '\x4', 's', '\x3', '\x2', '\x2', '\x2', '\x6', 'u', 
		'\x3', '\x2', '\x2', '\x2', '\b', 'w', '\x3', '\x2', '\x2', '\x2', '\n', 
		'z', '\x3', '\x2', '\x2', '\x2', '\f', '}', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x82', '\x3', '\x2', '\x2', '\x2', '\x10', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x91', '\x3', '\x2', '\x2', '\x2', '\x14', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x9C', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA7', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xB2', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xB9', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '$', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xC5', '\x3', '\x2', '\x2', '\x2', '(', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '*', '\xD3', '\x3', '\x2', '\x2', '\x2', ',', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '.', '\xE0', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '\x32', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\xEA', '\x3', '\x2', '\x2', '\x2', '\x36', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\xF9', '\x3', '\x2', '\x2', '\x2', ':', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '<', '\x101', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x105', '\x3', '\x2', '\x2', '\x2', '@', '\x109', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\x46', '\x10F', '\x3', '\x2', '\x2', 
		'\x2', 'H', '\x111', '\x3', '\x2', '\x2', '\x2', 'J', '\x113', '\x3', 
		'\x2', '\x2', '\x2', 'L', '\x115', '\x3', '\x2', '\x2', '\x2', 'N', '\x117', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x119', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x11B', '\x3', '\x2', '\x2', '\x2', 'T', '\x127', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x141', '\x3', '\x2', '\x2', '\x2', 'X', '\x145', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x147', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x149', '\x3', '\x2', '\x2', '\x2', '^', 'i', '\a', '\x2', '\x2', 
		'\x3', '_', '`', '\x5', '\x4', '\x3', '\x2', '`', '\x61', '\a', '\x42', 
		'\x2', '\x2', '\x61', '\x63', '\x3', '\x2', '\x2', '\x2', '\x62', '_', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', 
		'\a', '\x2', '\x2', '\x3', 'g', 'i', '\x3', '\x2', '\x2', '\x2', 'h', 
		'^', '\x3', '\x2', '\x2', '\x2', 'h', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'i', '\x3', '\x3', '\x2', '\x2', '\x2', 'j', 't', '\x3', '\x2', '\x2', 
		'\x2', 'k', 't', '\x5', '\f', '\a', '\x2', 'l', 't', '\x5', '\x12', '\n', 
		'\x2', 'm', 't', '\x5', '\x14', '\v', '\x2', 'n', 't', '\x5', '\x16', 
		'\f', '\x2', 'o', 't', '\x5', '\x18', '\r', '\x2', 'p', 't', '\x5', '\x6', 
		'\x4', '\x2', 'q', 't', '\x5', '\b', '\x5', '\x2', 'r', 't', '\x5', '\n', 
		'\x6', '\x2', 's', 'j', '\x3', '\x2', '\x2', '\x2', 's', 'k', '\x3', '\x2', 
		'\x2', '\x2', 's', 'l', '\x3', '\x2', '\x2', '\x2', 's', 'm', '\x3', '\x2', 
		'\x2', '\x2', 's', 'n', '\x3', '\x2', '\x2', '\x2', 's', 'o', '\x3', '\x2', 
		'\x2', '\x2', 's', 'p', '\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', '\x2', 
		'\x2', '\x2', 's', 'r', '\x3', '\x2', '\x2', '\x2', 't', '\x5', '\x3', 
		'\x2', '\x2', '\x2', 'u', 'v', '\a', '\n', '\x2', '\x2', 'v', '\a', '\x3', 
		'\x2', '\x2', '\x2', 'w', 'x', '\a', '\t', '\x2', '\x2', 'x', 'y', '\t', 
		'\x2', '\x2', '\x2', 'y', '\t', '\x3', '\x2', '\x2', '\x2', 'z', '{', 
		'\a', '\b', '\x2', '\x2', '{', '|', '\a', '\"', '\x2', '\x2', '|', '\v', 
		'\x3', '\x2', '\x2', '\x2', '}', '\x80', '\a', '\x11', '\x2', '\x2', '~', 
		'\x81', '\x5', '\xE', '\b', '\x2', '\x7F', '\x81', '\x5', '\x10', '\t', 
		'\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\r', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x83', '\a', '#', '\x2', '\x2', '\x83', '\x88', '\x5', '@', '!', '\x2', 
		'\x84', '\x85', '\a', '\x44', '\x2', '\x2', '\x85', '\x86', '\x5', ',', 
		'\x17', '\x2', '\x86', '\x87', '\a', '\x45', '\x2', '\x2', '\x87', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x84', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x8C', '\a', '$', '\x2', '\x2', '\x8B', '\x8A', 
		'\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', '\x17', 
		'\x2', '\x2', '\x8E', '\x8F', '\x5', 'L', '\'', '\x2', '\x8F', '\x90', 
		'\x5', '<', '\x1F', '\x2', '\x90', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x94', '\a', '\x14', '\x2', '\x2', '\x92', '\x95', '\x5', ' ', 
		'\x11', '\x2', '\x93', '\x95', '\x5', '\"', '\x12', '\x2', '\x94', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\x13', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\a', '\x12', 
		'\x2', '\x2', '\x97', '\x98', '\a', '\x16', '\x2', '\x2', '\x98', '\x9A', 
		'\x5', 'H', '%', '\x2', '\x99', '\x9B', '\x5', '*', '\x16', '\x2', '\x9A', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x15', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9E', '\a', 
		'\x18', '\x2', '\x2', '\x9D', '\x9F', '\a', '\x19', '\x2', '\x2', '\x9E', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x5', 
		'H', '%', '\x2', '\xA1', '\xA2', '\x5', '$', '\x13', '\x2', '\xA2', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\xA3', '\xA6', '\x5', '\x1A', '\xE', '\x2', 
		'\xA4', '\xA6', '\x5', '\x1E', '\x10', '\x2', '\xA5', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\xA5', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\a', '!', '\x2', '\x2', '\xA8', 
		'\xAA', '\a', '\x34', '\x2', '\x2', '\xA9', '\xAB', '\x5', '\x1C', '\xF', 
		'\x2', '\xAA', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAE', '\x5', '*', '\x16', '\x2', '\xAD', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xB0', '\a', '\x16', '\x2', '\x2', '\xB0', 
		'\xB1', '\x5', 'H', '%', '\x2', '\xB1', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\xB5', '\a', '\x44', '\x2', '\x2', '\xB3', '\xB6', '\x5', '\x1E', 
		'\x10', '\x2', '\xB4', '\xB6', '\x5', '\x1A', '\xE', '\x2', '\xB5', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '\xB4', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\a', '\x45', 
		'\x2', '\x2', '\xB8', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', 
		'\a', '\x17', '\x2', '\x2', '\xBA', '\xBD', '\x5', '\x46', '$', '\x2', 
		'\xBB', '\xBC', '\a', '\x1D', '\x2', '\x2', '\xBC', '\xBE', '\x5', 'H', 
		'%', '\x2', '\xBD', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '!', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC0', '\t', '\x3', '\x2', '\x2', '\xC0', '\xC1', '\x5', 'H', '%', '\x2', 
		'\xC1', '#', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\t', '\x4', 
		'\x2', '\x2', '\xC3', '\xC4', '\x5', '&', '\x14', '\x2', '\xC4', '%', 
		'\x3', '\x2', '\x2', '\x2', '\xC5', '\xC7', '\a', '\x44', '\x2', '\x2', 
		'\xC6', '\xC8', '\x5', '(', '\x15', '\x2', '\xC7', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\a', '\x45', '\x2', '\x2', 
		'\xCA', '\'', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xD0', '\x5', 'T', 
		'+', '\x2', '\xCC', '\xCD', '\a', '\x41', '\x2', '\x2', '\xCD', '\xCF', 
		'\x5', 'T', '+', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD1', ')', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\xD4', '\a', '\'', '\x2', '\x2', '\xD4', '\xD5', '\x5', 'T', '+', '\x2', 
		'\xD5', '+', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xDB', '\x5', '.', '\x18', 
		'\x2', '\xD7', '\xD8', '\a', '\x41', '\x2', '\x2', '\xD8', '\xDA', '\x5', 
		'.', '\x18', '\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '-', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xE1', '\x5', '\x32', '\x1A', '\x2', '\xDF', '\xE1', '\x5', '\x30', '\x19', 
		'\x2', '\xE0', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\xE1', '/', '\x3', '\x2', '\x2', '\x2', '\xE2', 
		'\xE3', '\a', ' ', '\x2', '\x2', '\xE3', '\xE4', '\a', '\x1B', '\x2', 
		'\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\x5', 
		'>', ' ', '\x2', '\xE6', '\x31', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', 
		'\x5', '\x42', '\"', '\x2', '\xE8', '\xE9', '\x5', '\x34', '\x1B', '\x2', 
		'\xE9', '\x33', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEE', '\x5', '\x36', 
		'\x1C', '\x2', '\xEB', '\xED', '\x5', ':', '\x1E', '\x2', '\xEC', '\xEB', 
		'\x3', '\x2', '\x2', '\x2', '\xED', '\xF0', '\x3', '\x2', '\x2', '\x2', 
		'\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', '\xEF', '\x35', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEE', 
		'\x3', '\x2', '\x2', '\x2', '\xF1', '\xF8', '\a', '\x1A', '\x2', '\x2', 
		'\xF2', '\xF8', '\a', '\x15', '\x2', '\x2', '\xF3', '\xF5', '\a', '\x10', 
		'\x2', '\x2', '\xF4', '\xF6', '\x5', '\x38', '\x1D', '\x2', '\xF5', '\xF4', 
		'\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', 
		'\xF6', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF1', '\x3', '\x2', 
		'\x2', '\x2', '\xF7', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\xF9', '\xFA', '\a', '\x44', '\x2', '\x2', '\xFA', '\xFB', '\a', '\x5', 
		'\x2', '\x2', '\xFB', '\xFC', '\a', '\x45', '\x2', '\x2', '\xFC', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\xFD', '\xFF', '\a', '$', '\x2', '\x2', '\xFE', 
		'\x100', '\a', '\x1B', '\x2', '\x2', '\xFF', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\x100', '\x3', '\x2', '\x2', '\x2', '\x100', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x101', '\x102', '\a', '\x1D', '\x2', '\x2', '\x102', 
		'\x103', '\x5', 'H', '%', '\x2', '\x103', '\x104', '\x5', '>', ' ', '\x2', 
		'\x104', '=', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\a', '\x44', 
		'\x2', '\x2', '\x106', '\x107', '\x5', '\x44', '#', '\x2', '\x107', '\x108', 
		'\a', '\x45', '\x2', '\x2', '\x108', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x109', '\x10A', '\x5', 'R', '*', '\x2', '\x10A', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x10B', '\x10C', '\x5', 'J', '&', '\x2', '\x10C', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x5', 'P', ')', '\x2', 
		'\x10E', '\x45', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\x5', 
		'J', '&', '\x2', '\x110', 'G', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', 
		'\x5', 'R', '*', '\x2', '\x112', 'I', '\x3', '\x2', '\x2', '\x2', '\x113', 
		'\x114', '\x5', 'R', '*', '\x2', '\x114', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x116', '\x5', 'P', ')', '\x2', '\x116', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x117', '\x118', '\a', 'J', '\x2', '\x2', '\x118', 'O', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\x5', 'N', '(', '\x2', 
		'\x11A', 'Q', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\x5', 'P', 
		')', '\x2', '\x11C', 'S', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', 
		'\b', '+', '\x1', '\x2', '\x11E', '\x11F', '\a', '\x44', '\x2', '\x2', 
		'\x11F', '\x120', '\x5', 'T', '+', '\x2', '\x120', '\x121', '\a', '\x45', 
		'\x2', '\x2', '\x121', '\x128', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', 
		'\t', '\x5', '\x2', '\x2', '\x123', '\x128', '\x5', 'T', '+', '\v', '\x124', 
		'\x125', '\a', '\x1C', '\x2', '\x2', '\x125', '\x128', '\x5', 'T', '+', 
		'\n', '\x126', '\x128', '\x5', 'X', '-', '\x2', '\x127', '\x11D', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x122', '\x3', '\x2', '\x2', '\x2', '\x127', 
		'\x124', '\x3', '\x2', '\x2', '\x2', '\x127', '\x126', '\x3', '\x2', '\x2', 
		'\x2', '\x128', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', 
		'\f', '\t', '\x2', '\x2', '\x12A', '\x12B', '\t', '\x6', '\x2', '\x2', 
		'\x12B', '\x13D', '\x5', 'T', '+', '\n', '\x12C', '\x12D', '\f', '\b', 
		'\x2', '\x2', '\x12D', '\x12E', '\t', '\x5', '\x2', '\x2', '\x12E', '\x13D', 
		'\x5', 'T', '+', '\t', '\x12F', '\x130', '\f', '\a', '\x2', '\x2', '\x130', 
		'\x131', '\x5', 'V', ',', '\x2', '\x131', '\x132', '\x5', 'T', '+', '\b', 
		'\x132', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x133', '\x134', '\f', 
		'\x6', '\x2', '\x2', '\x134', '\x135', '\t', '\a', '\x2', '\x2', '\x135', 
		'\x13D', '\x5', 'T', '+', '\a', '\x136', '\x137', '\f', '\x5', '\x2', 
		'\x2', '\x137', '\x138', '\a', ')', '\x2', '\x2', '\x138', '\x13D', '\x5', 
		'T', '+', '\x6', '\x139', '\x13A', '\f', '\x4', '\x2', '\x2', '\x13A', 
		'\x13B', '\t', '\b', '\x2', '\x2', '\x13B', '\x13D', '\x5', 'T', '+', 
		'\x5', '\x13C', '\x129', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x13C', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '\x133', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x136', '\x3', 
		'\x2', '\x2', '\x2', '\x13C', '\x139', '\x3', '\x2', '\x2', '\x2', '\x13D', 
		'\x140', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13C', '\x3', '\x2', '\x2', 
		'\x2', '\x13E', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x13F', 'U', '\x3', 
		'\x2', '\x2', '\x2', '\x140', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x141', 
		'\x142', '\t', '\t', '\x2', '\x2', '\x142', 'W', '\x3', '\x2', '\x2', 
		'\x2', '\x143', '\x146', '\x5', 'Z', '.', '\x2', '\x144', '\x146', '\x5', 
		'\\', '/', '\x2', '\x145', '\x143', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\x144', '\x3', '\x2', '\x2', '\x2', '\x146', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\x147', '\x148', '\t', '\n', '\x2', '\x2', '\x148', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '\x14A', '\x5', 'P', ')', '\x2', '\x14A', 
		']', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x64', 'h', 's', '\x80', '\x88', 
		'\x8B', '\x94', '\x9A', '\x9E', '\xA5', '\xAA', '\xAD', '\xB5', '\xBD', 
		'\xC7', '\xD0', '\xDB', '\xE0', '\xEE', '\xF5', '\xF7', '\xFF', '\x127', 
		'\x13C', '\x13E', '\x145',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
